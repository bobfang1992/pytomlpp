# Build, test and publish wheels to PyPI
# Build and test run on every push
# Publish runs only on a tag push
# Note: This does not publish sdist
name: Wheels

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Build wheels on Linux
            os: ubuntu-latest
          - name: Build wheels on MacOS
            os: macos-latest
          - name: Build wheels on Windows
            os: windows-latest

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: 3.8

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Get pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip

    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==1.4.2

    - name: Build wheels
      env:
        # Skip building on Python 2.7 and PyPy
        # Additionally, skip 32-bit Windows for now as MSVC needs seperate setup with different toolchain to do this
        # Refer: https://cibuildwheel.readthedocs.io/en/stable/cpp_standards/#windows-and-python-27
        CIBW_SKIP: cp27-* pp* *-win32
        CIBW_BEFORE_TEST: pip install -r tests/requirements.txt
        CIBW_TEST_COMMAND: pytest {project}/tests
      run: |
        python -m cibuildwheel --output-dir dist

    - uses: actions/upload-artifact@v2
      # All files are uploaded to the same location. Same-name files will be
      # overwritten (fine for wheels, where same-name should mean same-data)
      with:
        name: dist
        path: ./dist

  conda-build:
    name: conda-build (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.5", "3.6", "3.7", "3.8"]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: goanpeca/setup-miniconda@v1
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          miniconda-version: "latest"
          conda-build-version: "3.18.11"
      
      - name: conda build
        shell: bash -l {0}
        run: conda build . -c conda-forge --output-folder ./dist 

  publish:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
